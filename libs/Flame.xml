<?xml version="1.0"?>
<doc>
  <assembly>
    <name>Flame</name>
  </assembly>
  <members>
    <member name="T:Flame.AccessExtensions">
      <summary>
 Extensions for access modifiers.
 </summary>
    </member>
    <member name="M:Flame.AccessExtensions.DefinesType(Flame.IType,Flame.IType)">
      <summary>
 Gets a boolean that indicates whether the given type is equal to
 or defines the given type as a nested type, either directly or indirectly.
 </summary>
    </member>
    <member name="M:Flame.AccessExtensions.SharesDeclaringAssembly(Flame.IType,Flame.IType)">
      <summary>
 Returns a boolean that tells whether the given types share their
 declaring assemblies.
 </summary>
    </member>
    <member name="M:Flame.AccessExtensions.CanAccessMember(Flame.IType,Flame.IType,Flame.AccessModifier)">
      <summary>
 Gets a boolean value that indicates if the given type can access
 a member of the given declaring type with the given member access modifier,
 assuming that said declaring type can be accessed.
 </summary>
    </member>
    <member name="M:Flame.AccessExtensions.CanAccess(Flame.IType,Flame.IType)">
      <summary>
 Gets a boolean value that indicates whether the given type can
 access the given other type or not.
 </summary>
    </member>
    <member name="M:Flame.AccessExtensions.CanAccess(Flame.IType,Flame.ITypeMember)">
      <summary>
 Gets a boolean value that indicates whether the given type can
 access the given type member or not.
 </summary>
    </member>
    <member name="M:Flame.AccessExtensions.CanAccess(Flame.ITypeMember,Flame.ITypeMember)">
      <summary>
 Gets a boolean value that indicates whether this type member can
 access the given other type member or not.
 </summary>
    </member>
    <member name="M:Flame.AccessExtensions.FilterAccessible``1(Flame.IType,System.Collections.Generic.IEnumerable`1{T})">
      <summary>
 Filters out all inaccessible members in the given list of values.
 </summary>
    </member>
    <member name="P:Flame.AccessExtensions.IsGlobalPublic">
      <summary>
 Gets a boolean value that tells if this type is publically visible from
 the global scope.
 </summary>
    </member>
    <member name="P:Flame.AccessExtensions.IsGlobalPublic">
      <summary>
 Gets a boolean value that tells if this type member is publically visible from
 the global scope.
 </summary>
    </member>
    <member name="T:Flame.IMember">
      <summary>
 A root interface for members: objects that have a name, a full name,
 and a set of attributes.
 </summary>
    </member>
    <member name="P:Flame.IMember.Name">
      <summary>
 Gets the member's name.
 </summary>
    </member>
    <member name="P:Flame.IMember.FullName">
      <summary>
 Gets the member's full name.
 </summary>
    </member>
    <member name="P:Flame.IMember.Attributes">
      <summary>
 Gets the member's attributes.
 </summary>
    </member>
    <member name="T:Flame.ITypeMember">
      <summary>
 Defines type membes: members that are declared within the scope
 of a type.
 </summary>
    </member>
    <member name="P:Flame.ITypeMember.DeclaringType">
      <summary>
 Gets the type that declared this member.
 </summary>
    </member>
    <member name="P:Flame.ITypeMember.IsStatic">
      <summary>
 Gets a boolean value that indicates whether the member is static or not.
 </summary>
    </member>
    <member name="T:Flame.IType">
      <summary>
 Defines common functionality for types.
 </summary>
    </member>
    <member name="M:Flame.IType.GetDefaultValue">
      <summary>
 Gets the default value for this type.
 </summary>
    </member>
    <member name="P:Flame.IType.DeclaringNamespace">
      <summary>
 Gets the namespace that defined the type.
 </summary>
    </member>
    <member name="P:Flame.IType.Methods">
      <summary>
 Gets the type's methods, including constructors.
 </summary>
    </member>
    <member name="P:Flame.IType.Properties">
      <summary>
 Gets the type's properties.
 </summary>
    </member>
    <member name="P:Flame.IType.Fields">
      <summary>
 Gets the type's fields.
 </summary>
    </member>
    <member name="P:Flame.IType.BaseTypes">
      <summary>
 Gets the type's base types.
 </summary>
    </member>
    <member name="P:Flame.IType.AncestryRules">
      <summary>
 Gets this type's ancestry rules.
 </summary>
    </member>
    <member name="P:Flame.IAttribute.AttributeType">
      <summary>
 Gets the attribute's type.
 </summary>
    </member>
    <member name="P:Flame.IAttribute.Value">
      <summary>
 Gets the attribute's value.
 </summary>
    </member>
    <member name="M:Flame.IConstructedAttribute.GetArguments">
      <summary>
 Gets the arguments that were passed to the attribute constructor.
 </summary>
      <returns />
    </member>
    <member name="P:Flame.IConstructedAttribute.Constructor">
      <summary>
 Gets the constructor that was used to create this attribute.
 </summary>
    </member>
    <member name="P:Flame.IContainerType.ElementType">
      <summary>
 Gets the type referred to by the current container type.
 </summary>
      <returns />
    </member>
    <member name="P:Flame.IArrayType.ArrayRank">
      <summary>
 Gets the number of dimensions in an array.
 </summary>
    </member>
    <member name="T:Flame.IPointerType">
      <summary>
 Represents a pointer type: a value that points to the location in memory of an object.
 </summary>
    </member>
    <member name="P:Flame.IPointerType.PointerKind">
      <summary>
 Gets the pointer's "kind".
 </summary>
    </member>
    <member name="T:Flame.IVectorType">
      <summary>
 Represents a vector type: an array with fixed dimensions.
 </summary>
    </member>
    <member name="P:Flame.IVectorType.Dimensions">
      <summary>
 Gets the vector's dimensions.
 </summary>
    </member>
    <member name="T:Flame.IGenericMember">
      <summary>
 An interface for generic members, which are members that have
 a list of generic parameters.
 </summary>
    </member>
    <member name="P:Flame.IGenericMember.GenericParameters">
      <summary>
 Gets this method's generic parameters.
 </summary>
    </member>
    <member name="T:Flame.IGenericMemberInstance">
      <summary>
 A common interface for generic member instances.
 </summary>
    </member>
    <member name="P:Flame.IGenericMemberInstance.GenericArguments">
      <summary>
 Gets this generic member instance's type arguments.
 </summary>
    </member>
    <member name="T:Flame.IGenericParameter">
      <summary>
 Defines a generic parameter's interface.
 </summary>
    </member>
    <member name="P:Flame.IGenericParameter.DeclaringMember">
      <summary>
 Gets the generic member that declared this parameter.
 </summary>
    </member>
    <member name="P:Flame.IGenericParameter.Constraint">
      <summary>
 Gets the generic parameter's constraint.
 </summary>
    </member>
    <member name="T:Flame.IParameter">
      <summary>
 Defines a common interface for parameters.
 </summary>
    </member>
    <member name="P:Flame.IParameter.ParameterType">
      <summary>
 Gets the parameter's (default) type.
 </summary>
    </member>
    <member name="T:Flame.IMethod">
      <summary>
 Defines a common interface for methods.
 </summary>
    </member>
    <member name="P:Flame.IMethod.IsConstructor">
      <summary>
 Gets a boolean value that indicates if this method is a constructor.
 </summary>
    </member>
    <member name="P:Flame.IMethod.ReturnType">
      <summary>
 Gets the method's return type.
 </summary>
    </member>
    <member name="P:Flame.IMethod.Parameters">
      <summary>
 Gets the method's parameters.
 </summary>
    </member>
    <member name="P:Flame.IMethod.BaseMethods">
      <summary>
 Gets the method's base methods.
 </summary>
    </member>
    <member name="T:Flame.IInvocableMethod">
      <summary>
 Supplies an interface that defines invocable methods.
 </summary>
    </member>
    <member name="M:Flame.IInvocableMethod.Invoke(Flame.IBoundObject,System.Collections.Generic.IEnumerable`1{Flame.IBoundObject})">
      <summary>
 Invokes the method with the provided caller and arguments.
 </summary>
      <param name="Arguments" />
      <returns>
 A bound object if the invocation was successful.
 Otherwise, null.
 </returns>
    </member>
    <member name="T:Flame.IAccessor">
      <summary>
 Defines common behavior for property accessor methods.
 </summary>
    </member>
    <member name="P:Flame.IAccessor.AccessorType">
      <summary>
 Gets the accessor's type.
 </summary>
    </member>
    <member name="P:Flame.IAccessor.DeclaringProperty">
      <summary>
 Gets the property this accessor belongs to.
 </summary>
    </member>
    <member name="T:Flame.INamespace">
      <summary>
 Defines an interface for namespaces.
 </summary>
    </member>
    <member name="P:Flame.INamespace.Types">
      <summary>
 Gets the types that are declared in this namespace.
 </summary>
    </member>
    <member name="P:Flame.INamespace.DeclaringAssembly">
      <summary>
 Gets the assembly that declares this namespace.
 </summary>
    </member>
    <member name="M:Flame.IAssembly.CreateBinder">
      <summary>
 Creates a binder for this assembly.
 </summary>
      <returns />
    </member>
    <member name="M:Flame.IAssembly.GetEntryPoint">
      <summary>
 Gets the entry point method for this assembly.
 </summary>
      <returns />
    </member>
    <member name="P:Flame.IAssembly.AssemblyVersion">
      <summary>
 Gets the assembly's version.
 </summary>
    </member>
    <member name="T:Flame.IProperty">
      <summary>
 Defines a common interface for properties.
 </summary>
    </member>
    <member name="P:Flame.IProperty.PropertyType">
      <summary>
 Gets the property's type.
 </summary>
    </member>
    <member name="P:Flame.IProperty.Accessors">
      <summary>
 Gets the property's accessors.
 </summary>
    </member>
    <member name="P:Flame.IProperty.IndexerParameters">
      <summary>
 Gets the indexer's parameters, if any.
 </summary>
    </member>
    <member name="T:Flame.AccessorType">
      <summary>
 Defines an accessor's "type".
 Each property has zero or one accessors of any given type.
 </summary>
    </member>
    <member name="P:Flame.AccessorType.Name">
      <summary>
 Gets this accessor type's name.
 </summary>
    </member>
    <member name="T:Flame.IField">
      <summary>
 Defines a common interface for fields.
 </summary>
    </member>
    <member name="P:Flame.IField.FieldType">
      <summary>
 Gets the field's type.
 </summary>
    </member>
    <member name="T:Flame.ILiteralField">
      <summary>
 Defines common functionality for fields that contain an immutable literal
 value.
 </summary>
    </member>
    <member name="P:Flame.ILiteralField.Value">
      <summary>
 Gets this literal field's immutable literal value.
 </summary>
    </member>
    <member name="M:Flame.MemberExtensions.GetLowestAncestryDegree(System.Collections.Generic.IEnumerable`1{Flame.IType},Flame.IType)">
      <summary>
 Gets the lowest non-zero ancestry degree between the given set
 of type and right-hand type operand.
 </summary>
    </member>
    <member name="M:Flame.MemberExtensions.Is(Flame.IType,Flame.IType)">
      <summary>
 Gets a boolean value that indicates if this type can be stored in a variable of the provided type.
 </summary>
      <param name="Other" />
      <returns />
    </member>
    <member name="M:Flame.MemberExtensions.IsEquivalent(Flame.IType,Flame.IType)">
      <summary>
 Tests if the given type is equivalent with the given other type, i.e.
 it has ancestry degree zero. This method also has an equality fast-path,
 as equality implies equivalence.
 </summary>
    </member>
    <member name="M:Flame.MemberExtensions.GetParent(Flame.IType)">
      <summary>
 Gets the type's parent type.
 </summary>
      <param name="Other" />
      <returns />
    </member>
    <member name="M:Flame.MemberExtensions.MakeArrayType(Flame.IType,System.Int32)">
      <summary>
 Creates an array type based on the given element type and
 array rank.
 </summary>
    </member>
    <member name="M:Flame.MemberExtensions.MakePointerType(Flame.IType,Flame.PointerKind)">
      <summary>
 Creates a pointer type that points to an object of the given type
 and is of the given pointer kind.
 </summary>
    </member>
    <member name="M:Flame.MemberExtensions.MakeVectorType(Flame.IType,System.Collections.Generic.IReadOnlyList`1{System.Int32})">
      <summary>
 Creates a vector type that contains objects of the given type
 and has the given dimensions.
 </summary>
    </member>
    <member name="M:Flame.MemberExtensions.MakeVectorType(Flame.IType,System.Int32[])">
      <summary>
 Creates a vector type that contains objects of the given type
 and has the given dimensions.
 </summary>
    </member>
    <member name="P:Flame.MemberExtensions.IsPureInterface">
      <summary>
 Determines if this type is a "pure interface", i.e. an interface whose
 base types are all pure interfaces.
 </summary>
    </member>
    <member name="M:Flame.MemberLookup.GetAllFields(Flame.IType)">
      <summary>
 Gets all fields - locally declared and inherited - of the provided type.
 </summary>
      <remarks>
 This implementation tries to accurately represent that fields' layout.
 </remarks>
    </member>
    <member name="M:Flame.MemberSelection.GetBestProperties(System.Collections.Generic.IEnumerable`1{Flame.IProperty},Flame.IType,System.Collections.Generic.IEnumerable`1{Flame.IType})">
      <summary>
 Gets the properties that match the specified parameter types best.
 </summary>
      <param name="ParameterTypes" />
      <returns />
    </member>
    <member name="M:Flame.MemberSelection.GetBestMethods(System.Collections.Generic.IEnumerable`1{Flame.IMethod},Flame.IType,Flame.IType[])">
      <summary>
 Gets the methods that match the specified parameter types best.
 </summary>
      <param name="ParameterTypes" />
      <returns />
    </member>
    <member name="M:Flame.MemberSelection.GetBestMethods(System.Collections.Generic.IEnumerable`1{Flame.IMethod},Flame.IType[])">
      <summary>
 Gets the methods that match the specified parameter types best.
 </summary>
      <param name="ParameterTypes" />
      <returns />
    </member>
    <member name="M:Flame.MemberSelection.FilterBaseMethods(Flame.IMethod[])">
      <summary>
 Filters out all method in the given array of method that have an override or implementation which is also present in the given array.
 </summary>
    </member>
    <member name="M:Flame.PropertyExtensions.GetDeclaringType(Flame.IProperty)">
      <summary>
 Gets the given property's declaring type.
 </summary>
    </member>
    <member name="M:Flame.PropertyExtensions.GetIndexerParameterTypes(Flame.IProperty)">
      <summary>
 Gets the given property's parameter types.
 </summary>
    </member>
    <member name="M:Flame.PropertyExtensions.GetExtensionIndexerParameterTypes(Flame.IProperty)">
      <summary>
 Gets the given method's parameter types. If it is an extension parameter,
 the first parameter is omitted.
 </summary>
    </member>
    <member name="M:Flame.PropertyExtensions.GetExtensionThisType(Flame.IProperty)">
      <summary>
 Gets the "this" type of a property, which may be an extension property.
 If so, the "this" type is assumed to be the type of the first parameter.
 Otherwise, the declaring type is the "this" type.
 </summary>
    </member>
    <member name="M:Flame.PropertyExtensions.Shadows(Flame.IProperty,Flame.IProperty,Flame.IType(Flame.IProperty),System.Collections.Generic.IEnumerable`1{Flame.IType}(Flame.IProperty))">
      <summary>
 Tells if the first property "shadows" the second, i.e. it has the
 same name, staticness and indexer parameter list, but its "this" type
 is more derived than the second property's "this" type.
 </summary>
    </member>
    <member name="M:Flame.PropertyExtensions.Shadows(Flame.IProperty,Flame.IProperty)">
      <summary>
 Tells if the first property "shadows" the second, i.e. it has the
 same name, staticness and indexer parameter list, but its declaring type
 is more derived than the second property's declaring type.
 </summary>
    </member>
    <member name="M:Flame.PropertyExtensions.ShadowsExtension(Flame.IProperty,Flame.IProperty)">
      <summary>
 Tells if the first property "shadows" the second, i.e. it has the
 same name, staticness and indexer parameter list, but its "this" type
 is more derived than the second property's "this" type.
 For extension methods, the "this" type is assumed to be the type
 of the first parameter.
 </summary>
    </member>
    <member name="M:Flame.PropertyExtensions.HasSameSignature(Flame.IProperty,Flame.IProperty)">
      <summary>
 Tests if the given properties have the same signature.
 </summary>
    </member>
    <member name="M:Flame.PropertyExtensions.HasSameCallSignature(Flame.IProperty,Flame.IProperty)">
      <summary>
 Tests if the given properties have the same call signature, which is
 defined as the property signature, without the property type.
 </summary>
    </member>
    <member name="M:Flame.PropertyExtensions.HasSameCallSignature(Flame.IProperty,Flame.IProperty,System.Collections.Generic.IEnumerable`1{Flame.IType}(Flame.IProperty))">
      <summary>
 Tests if the given properties have the same call signature, which is
 defined as the property signature, without the property type.
 </summary>
    </member>
    <member name="M:Flame.PropertyExtensions.GetAccessor(Flame.IProperty,Flame.AccessorType)">
      <summary>
 Gets the property's accessor of the provided accessor type.
 </summary>
      <param name="Property" />
      <returns />
    </member>
    <member name="M:Flame.PropertyExtensions.GetGetAccessor(Flame.IProperty)">
      <summary>
 Gets the property's get accessor.
 </summary>
      <param name="Property" />
      <returns />
    </member>
    <member name="M:Flame.PropertyExtensions.GetSetAccessor(Flame.IProperty)">
      <summary>
 Gets the property's set accessor.
 </summary>
      <param name="Property" />
      <returns />
    </member>
    <member name="M:Flame.PropertyExtensions.GetAddAccessor(Flame.IProperty)">
      <summary>
 Gets the property's add accessor.
 </summary>
      <param name="Property" />
      <returns />
    </member>
    <member name="M:Flame.PropertyExtensions.GetRemoveAccessor(Flame.IProperty)">
      <summary>
 Gets the property's remove accessor.
 </summary>
      <param name="Property" />
      <returns />
    </member>
    <member name="M:Flame.PropertyExtensions.GetProperty(System.Collections.Generic.IEnumerable`1{Flame.IProperty},System.String,System.Boolean)">
      <summary>
 Gets the first property in the given sequence of properties
 that has the given name and staticness.
 </summary>
    </member>
    <member name="M:Flame.PropertyExtensions.GetProperty(System.Collections.Generic.IEnumerable`1{Flame.IProperty},System.Boolean,Flame.IType,Flame.IType[])">
      <summary>
 Gets the first property in the given sequence of properties
 that has the given staticness, property type and indexer parameters.
 </summary>
    </member>
    <member name="M:Flame.PropertyExtensions.GetProperty(System.Collections.Generic.IEnumerable`1{Flame.IProperty},System.String,System.Boolean,Flame.IType,Flame.IType[])">
      <summary>
 Gets the first property in the given sequence of properties
 that has the given name, staticness, property type and indexer parameters.
 </summary>
    </member>
    <member name="M:Flame.PropertyExtensions.GetProperty(System.Collections.Generic.IEnumerable`1{Flame.IProperty},Flame.IProperty)">
      <summary>
 Gets the first property in the given sequence of properties that has
 the same signature as the given property.
 </summary>
    </member>
    <member name="M:Flame.PropertyExtensions.GetIndexerParameters(Flame.IProperty)">
      <summary>
 Gets a read-only array containing the given property's indexer parameter list.
 </summary>
    </member>
    <member name="T:Flame.SetExtensions">
      <summary>
 Defines operations on generic sets.
 </summary>
    </member>
    <member name="M:Flame.SetExtensions.UpperBounds``1(System.Collections.Generic.IEnumerable`1{T},System.Boolean(T, T))">
      <summary>
 Gets the finite set of upper bounds for the given finite set,
 based on the given less-than function.
 </summary>
    </member>
    <member name="M:Flame.FieldExtensions.GetField(Flame.IField,Flame.IBoundObject)">
      <summary>
 Gets the field's value for the specified object.
 </summary>
      <param name="Target" />
      <returns />
    </member>
    <member name="M:Flame.FieldExtensions.SetField(Flame.IField,Flame.IBoundObject,Flame.IBoundObject)">
      <summary>
 Sets the field's value on the specified object.
 </summary>
      <param name="Value" />
    </member>
    <member name="P:Flame.IEnvironment.Name">
      <summary>
 Gets the environment's name.
 </summary>
    </member>
    <member name="P:Flame.IEnvironment.RootType">
      <summary>
 Gets the root type for this environment, if any.
 </summary>
    </member>
    <member name="P:Flame.IEnvironment.EnumerableType">
      <summary>
 Gets the generic enumerable type declaration for this environment, if any.
 </summary>
    </member>
    <member name="P:Flame.IEnvironment.EnumeratorType">
      <summary>
 Gets the generic enumerator type declaration for this environment, if any.
 </summary>
    </member>
    <member name="M:Flame.MethodExtensions.IsImplementationOf(Flame.IMethod,Flame.IMethod)">
      <summary>
 Gets a boolean value that tells if this method implements
 the given base method.
 </summary>
    </member>
    <member name="M:Flame.MethodExtensions.GetImplementation(Flame.IMethod,Flame.IType)">
      <summary>
 Gets this method's implementation in the given type.
 If no implementation can be found, null is returned.
 </summary>
      <remarks>
 Note: a virtual method without overrides in the given type could
 arguably be considered its own, albeit trivial, implementation.
 This method still returns null in that case, however.
 </remarks>
    </member>
    <member name="M:Flame.MethodExtensions.GetDeclaringType(Flame.IMethod)">
      <summary>
 Gets the given method's declaring type.
 </summary>
    </member>
    <member name="M:Flame.MethodExtensions.GetParameterTypes(Flame.IMethod)">
      <summary>
 Gets the given method's parameter types.
 </summary>
    </member>
    <member name="M:Flame.MethodExtensions.GetExtensionParameterTypes(Flame.IMethod)">
      <summary>
 Gets the given method's parameter types. If it is an extension parameter,
 the first parameter is omitted.
 </summary>
    </member>
    <member name="M:Flame.MethodExtensions.GetExtensionThisType(Flame.IMethod)">
      <summary>
 Gets the "this" type of a method, which may be an extension method.
 If so, the "this" type is assumed to be the type of the first parameter.
 Otherwise, the declaring type is the "this" type.
 </summary>
    </member>
    <member name="M:Flame.MethodExtensions.Shadows(Flame.IMethod,Flame.IMethod,Flame.IType(Flame.IMethod),System.Collections.Generic.IEnumerable`1{Flame.IType}(Flame.IMethod))">
      <summary>
 Tells if the first method "shadows" the second, i.e. it has the
 same name, staticness and parameter list, but its "this" type
 is more derived than the second method's "this" type. A delegate
 is given that figures out what the "this" type of a given type member is.
 </summary>
    </member>
    <member name="M:Flame.MethodExtensions.Shadows(Flame.IMethod,Flame.IMethod)">
      <summary>
 Tells if the first method "shadows" the second, i.e. it has the
 same name, staticness and parameter list, but its declaring type
 is more derived than the second method's derived type.
 </summary>
    </member>
    <member name="M:Flame.MethodExtensions.ShadowsExtension(Flame.IMethod,Flame.IMethod)">
      <summary>
 Tells if the first method "shadows" the second, i.e. it has the
 same name, staticness and parameter list, but its "this" type
 is more derived than the second method's "this" type.
 For extension methods, the "this" type is assumed to be the type
 of the first parameter.
 </summary>
    </member>
    <member name="M:Flame.MethodExtensions.HasSameSignature(Flame.IMethod,Flame.IMethod)">
      <summary>
 Determines whether the given methods have the same signature or not.
 </summary>
    </member>
    <member name="M:Flame.MethodExtensions.HasSameCallSignature(Flame.IMethod,Flame.IMethod)">
      <summary>
 Determines whether the given methods have the same call signature or not.
 A call signature is defined as the method's signature, minus the
 return type.
 </summary>
    </member>
    <member name="M:Flame.MethodExtensions.HasSameCallSignature(Flame.IMethod,Flame.IMethod,System.Collections.Generic.IEnumerable`1{Flame.IType}(Flame.IMethod))">
      <summary>
 Determines whether the given methods have the same call signature or not.
 A call signature is defined as the method's signature, minus the
 return type.
 Constructors are treated no differently from regular methods here:
 their constructorness is not considered.
 </summary>
    </member>
    <member name="M:Flame.MethodExtensions.GetAllMethods(Flame.IType,System.String,System.Boolean,Flame.IType[])">
      <summary>
 Gets all methods - directly declared and inherited - in the given
 declaring type with the given name, staticness and parameter types.
 </summary>
    </member>
    <member name="M:Flame.MethodExtensions.GetMethod(System.Collections.Generic.IEnumerable`1{Flame.IMethod},System.Boolean,Flame.IType,Flame.IType[])">
      <summary>
 Gets the first method in the given sequence of candidate methods
 with the given staticness, return type and parameter types.
 </summary>
    </member>
    <member name="M:Flame.MethodExtensions.GetMethod(System.Collections.Generic.IEnumerable`1{Flame.IMethod},System.String,System.Boolean,Flame.IType,Flame.IType[])">
      <summary>
 Gets the first method in the given sequence of candidate methods
 with the given name, staticness, return type and parameter types.
 </summary>
    </member>
    <member name="M:Flame.MethodExtensions.GetMethod(System.Collections.Generic.IEnumerable`1{Flame.IMethod},Flame.IMethod)">
      <summary>
 Gets the first method in the given sequence of candidate methods that
 has the same signature as the given method.
 </summary>
      <remarks>
 This differs from the
 <code>GetMethod(this [IMethod], string, bool, IType, IType[])</code>
 overload in that generic parameters are also considered here.
 </remarks>
    </member>
    <member name="M:Flame.MethodExtensions.GetMethods(Flame.IType)">
      <summary>
 Gets all non-constructor methods declared by this type.
 </summary>
    </member>
    <member name="M:Flame.MethodExtensions.GetConstructors(Flame.IType)">
      <summary>
 Gets this type's constructors.
 </summary>
    </member>
    <member name="M:Flame.MethodExtensions.GetParameters(Flame.IMethod)">
      <summary>
 Gets a read-only array containing the given method's parameter list.
 </summary>
    </member>
    <member name="P:Flame.MethodExtensions.HasReturnValue">
      <summary>
 Gets a boolean value that indicates whether the given method has a
 non-null, non-void return value.
 </summary>
    </member>
    <member name="T:Flame.CompositeConverter`3">
      <summary>
 A converter implementation that represents the composition of two
 converters.
 </summary>
    </member>
    <member name="M:Flame.CompositeConverter`3.#ctor(Flame.IConverter`2{T1,T2},Flame.IConverter`2{T2,T3})">
      <summary>
 Creates a converter that represents the composition of the given
 converters.
 </summary>
    </member>
    <member name="P:Flame.CompositeConverter`3.First">
      <summary>
 Gets the first converter to apply.
 </summary>
    </member>
    <member name="P:Flame.CompositeConverter`3.Second">
      <summary>
 Gets the second converter to apply.
 </summary>
    </member>
    <member name="T:Flame.OperatorCache">
      <summary>
 Describes an object that caches operator overload methods.
 </summary>
    </member>
    <member name="M:Flame.OperatorExtensions.GetAllOperatorOverloads(Flame.Operator,System.Collections.Generic.IEnumerable`1{Flame.IType})">
      <summary>
 Gets all operator methods associated with the given argument types for the given operator.
 </summary>
    </member>
    <member name="M:Flame.OperatorExtensions.GetOperatorOverload(Flame.Operator,System.Collections.Generic.IEnumerable`1{Flame.IType})">
      <summary>
 Gets the best operator overload for the given operator with the given argument types.
 </summary>
    </member>
    <member name="M:Flame.GenericNameExtensions.GetGenericFreeName(Flame.IGenericMember)">
      <summary>
 Gets the member's name, without generic parameters.
 </summary>
      <param name="Member" />
      <returns />
    </member>
    <member name="M:Flame.GenericNameExtensions.GetGenericFreeFullName(Flame.IGenericMember)">
      <summary>
 Gets the member's full name, without generic parameters.
 </summary>
      <param name="Member" />
      <returns />
    </member>
    <member name="M:Flame.GenericExtensions.GetGenericDeclaration(Flame.IMethod)">
      <summary>
 Gets this method's generic declaration if it is a generic instance.
 Otherwise, the given method is returned.
 </summary>
    </member>
    <member name="M:Flame.GenericExtensions.GetGenericDeclaration(Flame.IType)">
      <summary>
 Gets this type's generic declaration if it is a generic instance.
 Otherwise, the given type is returned.
 </summary>
    </member>
    <member name="M:Flame.GenericExtensions.MakeGenericType(Flame.IType,System.Collections.Generic.IEnumerable`1{Flame.IType})">
      <summary>
 Instantiates the given generic type with the given sequence of type
 arguments.
 </summary>
    </member>
    <member name="M:Flame.GenericExtensions.MakeGenericMethod(Flame.IMethod,System.Collections.Generic.IEnumerable`1{Flame.IType})">
      <summary>
 Instantiates the given generic method with the given sequence of type
 arguments.
 </summary>
    </member>
    <member name="M:Flame.GenericExtensions.GetGenericArguments(Flame.IGenericMember)">
      <summary>
 Gets the generic member's generic arguments if it is a generic instance.
 Otherwise, the empty sequence is returned.
 </summary>
    </member>
    <member name="M:Flame.GenericExtensions.CloneGenericParameters(System.Collections.Generic.IEnumerable`1{Flame.IGenericParameter},Flame.IGenericMember)">
      <summary>
 "Clones" the given sequence of generic parameters: their names,
 attributes and generic constraints are preserved, but they are
 assigned to a new parent member.
 </summary>
    </member>
    <member name="M:Flame.GenericExtensions.CloneGenericParameters(System.Collections.Generic.IEnumerable`1{Flame.IGenericParameter},Flame.IGenericMember,Flame.IConverter`2{Flame.IType,Flame.IType})">
      <summary>
 "Clones" the given sequence of generic parameters: their names,
 attributes and generic constraints are preserved, but they are
 assigned to a new parent member. The generic parameters' constraint
 types may also be modified.
 </summary>
    </member>
    <member name="P:Flame.GenericExtensions.IsGenericParameter">
      <summary>
 Gets a boolean value that indicates if the given type is a generic parameter.
 </summary>
      <param name="Type" />
      <returns />
    </member>
    <member name="P:Flame.GenericExtensions.IsGeneric">
      <summary>
 Tests if the given (potentially) generic member has any
 generic parameters.
 </summary>
    </member>
    <member name="P:Flame.GenericExtensions.IsGenericDeclaration">
      <summary>
 Finds out if this generic member is a generic declaration, i.e.
 not a generic instance.
 </summary>
    </member>
    <member name="P:Flame.GenericExtensions.IsGenericInstance">
      <summary>
 Determines whether the given member is a generic instance or not.
 </summary>
    </member>
    <member name="P:Flame.GenericExtensions.IsRecursiveGenericInstance">
      <summary>
 Tells if the given type is a recursive generic instance: a generic instance
 or a nested type of a generic instance.
 </summary>
    </member>
    <member name="T:Flame.GenericInstanceAccessor">
      <summary>
 A property accessor belonging to a generic type instantiation.
 </summary>
    </member>
    <member name="M:Flame.GenericInstanceAccessor.#ctor(Flame.IAccessor,Flame.IGenericResolver,Flame.IProperty)">
      <summary>
 Creates a new generic type instance accessor from the given accessor,
 resolver and declaring property.
 </summary>
    </member>
    <member name="P:Flame.GenericInstanceAccessor.AccessorType">
      <summary>
 Gets the property's accessor type.
 </summary>
    </member>
    <member name="P:Flame.GenericInstanceAccessor.DeclaringProperty">
      <summary>
 Gets the generic type instance accessor's declaring property.
 </summary>
    </member>
    <member name="P:Flame.GenericInstanceField.Declaration">
      <summary>
 Gets the generic instance field's original definition.
 </summary>
    </member>
    <member name="P:Flame.GenericInstanceField.Resolver">
      <summary>
 Gets the generic instance field's generic resolver.
 </summary>
    </member>
    <member name="P:Flame.GenericInstanceField.DeclaringType">
      <summary>
 Gets the generic instance field's declaring type.
 </summary>
    </member>
    <member name="T:Flame.GenericInstanceMethod">
      <summary>
 Defines a method belonging to a generic type instantiation.
 </summary>
    </member>
    <member name="M:Flame.GenericInstanceMethod.#ctor(Flame.IMethod,Flame.IGenericResolver,Flame.IType)">
      <summary>
 Creates a generic type method instantiation from the given method,
 resolver and declaring type.
 </summary>
    </member>
    <member name="M:Flame.GenericInstanceMethod.#ctor(Flame.IMethod,Flame.IGenericResolverType)">
      <summary>
 Creates a generic type method instantiation from the given method and
 declaring type.
 </summary>
    </member>
    <member name="T:Flame.GenericInstanceType">
      <summary>
 Defines a type belonging to a generic type instantiation.
 </summary>
    </member>
    <member name="M:Flame.GenericInstanceType.#ctor(Flame.IType,Flame.IGenericResolver,Flame.IType)">
      <summary>
 Creates a generic type instantiation from the given type,
 resolver and declaring type.
 </summary>
    </member>
    <member name="M:Flame.GenericInstanceType.#ctor(Flame.IType,Flame.IGenericResolverType)">
      <summary>
 Creates a generic type instantiation from the given type and
 declaring type.
 </summary>
    </member>
    <member name="T:Flame.GenericMethod">
      <summary>
 Defines a generic method instantiation.
 </summary>
    </member>
    <member name="M:Flame.GenericMethod.#ctor(Flame.IMethod,System.Collections.Generic.IEnumerable`1{Flame.IType})">
      <summary>
 Creates a generic instantiation of the given method with the given
 type arguments.
 </summary>
    </member>
    <member name="P:Flame.GenericMethod.GenericArguments">
      <summary>
 Gets this generic method's type arguments.
 </summary>
    </member>
    <member name="T:Flame.GenericMethodBase">
      <summary>
 Defines a base class for generic method instances.
 </summary>
    </member>
    <member name="P:Flame.GenericMethodBase.Resolver">
      <summary>
 Gets the generic resolver that belongs to this generic method.
 </summary>
    </member>
    <member name="P:Flame.GenericMethodBase.Name">
      <summary>
 Gets name of this generic method.
 </summary>
    </member>
    <member name="P:Flame.GenericMethodBase.DeclaringType">
      <summary>
 Gets this generic method's declaring type.
 </summary>
    </member>
    <member name="P:Flame.GenericMethodBase.Declaration">
      <summary>
 Gets the method definition this generic instance is based on.
 </summary>
    </member>
    <member name="T:Flame.GenericType">
      <summary>
 Defines a generic type instantiation.
 </summary>
    </member>
    <member name="M:Flame.GenericType.#ctor(Flame.IType,System.Collections.Generic.IEnumerable`1{Flame.IType})">
      <summary>
 Creates a generic instantiation of the given type with the given
 type arguments.
 </summary>
    </member>
    <member name="P:Flame.GenericType.GenericArguments">
      <summary>
 Gets this generic instantiation's type arguments.
 </summary>
    </member>
    <member name="T:Flame.GenericTypeBase">
      <summary>
 A base class for generic type instances.
 </summary>
    </member>
    <member name="M:Flame.GenericTypeBase.#ctor(Flame.IType)">
      <summary>
 Creates a new generic type base from the given type.
 </summary>
    </member>
    <member name="M:Flame.GenericTypeBase.GetDefaultValue">
      <summary>
 Gets the default value for this type.
 </summary>
    </member>
    <member name="P:Flame.GenericTypeBase.Resolver">
      <summary>
 Gets this generic type's resolver.
 </summary>
    </member>
    <member name="P:Flame.GenericTypeBase.DeclaringNamespace">
      <summary>
 Gets this generic type's declaring namespace.
 </summary>
    </member>
    <member name="P:Flame.GenericTypeBase.Name">
      <summary>
 Gets this generic type's name.
 </summary>
    </member>
    <member name="P:Flame.GenericTypeBase.AncestryRules">
      <summary>
 Gets the generic type's ancestry rules.
 </summary>
    </member>
    <member name="P:Flame.GenericTypeBase.Declaration">
      <summary>
 Gets the type definition this generic type is based on.
 </summary>
    </member>
    <member name="T:Flame.IAncestryRules">
      <summary>
 A set of rules that determine whether one type is a subtype of another,
 and how close it is to the parent type.
 </summary>
    </member>
    <member name="M:Flame.IAncestryRules.GetAncestryDegree(Flame.IType,Flame.IType)">
      <summary>
 Determines whether the second type is a subtype of the first.
 An ancestry degree of zero means that the two types are equivalent,
 an ancestry degree greater than zero means that the second type
 is a subtype of the first, and any other value means that - according
 to this set of rules - there is neither an equivalence, nor a subtype
 relationship.
 </summary>
    </member>
    <member name="P:Flame.INamespaceTree.Namespaces">
      <summary>
 Gets this namespace tree's nested namespaces.
 </summary>
    </member>
    <member name="M:Flame.SingletonExtensions.GetSingletonMember(Flame.IType)">
      <summary>
 Gets the given type's singleton member, which may be either
 a property or a field.
 </summary>
    </member>
    <member name="M:Flame.SingletonExtensions.GetAssociatedTypes(Flame.IType)">
      <summary>
 Gets the sequence of all associated types of the given
 type.
 </summary>
    </member>
    <member name="M:Flame.SingletonExtensions.GetAssociatedSingletons(Flame.IType)">
      <summary>
 Gets all singleton types that are associated with the
 given type.
 </summary>
    </member>
    <member name="M:Flame.SingletonExtensions.GetAssociatedSingleton(Flame.IType)">
      <summary>
 Gets the given type's single associated singleton type,
 if any. Otherwise, null is returned.
 </summary>
    </member>
    <member name="M:Flame.SingletonExtensions.IsAssociatedSingletonOf(Flame.IType,Flame.IType)">
      <summary>
 Checks if the first type is an associated singleton
 of the given target type.
 </summary>
    </member>
    <member name="M:Flame.SingletonExtensions.GetAssociatedSingletonOwner(Flame.IType)">
      <summary>
 Gets the "owner" of this associated singleton type.
 Null is returned if no owner could be found.
 </summary>
    </member>
    <member name="M:Flame.SingletonExtensions.IsAssociatedSingleton(Flame.IType)">
      <summary>
 Checks if the given type is the associated singleton of
 some other type.
 </summary>
    </member>
    <member name="P:Flame.SingletonExtensions.IsSingleton">
      <summary>
 Tests if the given type is a singleton.
 </summary>
    </member>
    <member name="T:Flame.IGenericConstraint">
      <summary>
 Describes common functionality for all generic constraints.
 </summary>
    </member>
    <member name="M:Flame.IGenericConstraint.Transform(Flame.IConverter`2{Flame.IType,Flame.IType})">
      <summary>
 Transforms the types in this generic constraint using the
 given type converter.
 </summary>
    </member>
    <member name="M:Flame.IGenericConstraint.Satisfies(Flame.IType)">
      <summary>
 Gets a boolean value that indicates whether the given type argument
 satisfies the generic constraint.
 </summary>
    </member>
    <member name="M:Flame.GenericConstraintExtensions.ExtractBaseTypes(Flame.IGenericConstraint)">
      <summary>
 Extracts all required base types from this generic constraint.
 </summary>
    </member>
    <member name="M:Flame.GenericConstraintExtensions.ExtractBaseTypes(System.Collections.Generic.IEnumerable`1{Flame.IGenericConstraint})">
      <summary>
 Extracts all required base types from these generic constraints.
 </summary>
    </member>
    <member name="M:Flame.GenericConstraintExtensions.HasConstraint``1(Flame.IGenericConstraint)">
      <summary>
 Gets a boolean value that indicates if the generic constraint requires a constraint of type 'T' to be met.
 </summary>
    </member>
    <member name="M:Flame.GenericConstraintExtensions.HasConstraint``1(System.Collections.Generic.IEnumerable`1{Flame.IGenericConstraint})">
      <summary>
 Gets a boolean value that indicates if any of the given generic constraints require a constraint of type 'T' to be met.
 </summary>
    </member>
    <member name="T:Flame.TypeConstraint">
      <summary>
 A generic constraint that specifies that a value of the type argument should be assignable to a specific type.
 </summary>
    </member>
    <member name="M:Flame.TypeConstraint.#ctor(Flame.IType)">
      <summary>
 Creates a new type constraint based on the given type.
 </summary>
    </member>
    <member name="M:Flame.TypeConstraint.Transform(Flame.IConverter`2{Flame.IType,Flame.IType})">
      <summary>
 Transforms the types in this generic constraint using the
 given type converter.
 </summary>
    </member>
    <member name="M:Flame.TypeConstraint.Satisfies(Flame.IType)">
      <summary>
 Gets a boolean value that indicates whether the given type argument
 satisfies the generic constraint.
 </summary>
    </member>
    <member name="P:Flame.TypeConstraint.Type">
      <summary>
 Gets the type that type arguments have to derive from.
 </summary>
    </member>
    <member name="T:Flame.AndConstraint">
      <summary>
 A generic constraint that specifies that the type argument should satisfy all given child constraints.
 </summary>
    </member>
    <member name="M:Flame.AndConstraint.Transform(Flame.IConverter`2{Flame.IType,Flame.IType})">
      <summary>
 Transforms the types in this generic constraint using the
 given type converter.
 </summary>
    </member>
    <member name="M:Flame.AndConstraint.Satisfies(Flame.IType)">
      <summary>
 Gets a boolean value that indicates whether the given type argument
 satisfies the generic constraint.
 </summary>
    </member>
    <member name="T:Flame.ValueTypeConstraint">
      <summary>
 A constraint that is satisfied by value types only.
 </summary>
    </member>
    <member name="M:Flame.ValueTypeConstraint.Transform(Flame.IConverter`2{Flame.IType,Flame.IType})">
      <summary>
 Transforms the types in this generic constraint using the
 given type converter.
 </summary>
    </member>
    <member name="M:Flame.ValueTypeConstraint.Satisfies(Flame.IType)">
      <summary>
 Gets a boolean value that indicates whether the given type argument
 satisfies the generic constraint.
 </summary>
    </member>
    <member name="T:Flame.ReferenceTypeConstraint">
      <summary>
 A constraint that is satisfied by reference types only.
 </summary>
    </member>
    <member name="M:Flame.ReferenceTypeConstraint.Transform(Flame.IConverter`2{Flame.IType,Flame.IType})">
      <summary>
 Transforms the types in this generic constraint using the
 given type converter.
 </summary>
    </member>
    <member name="M:Flame.ReferenceTypeConstraint.Satisfies(Flame.IType)">
      <summary>
 Gets a boolean value that indicates whether the given type argument
 satisfies the generic constraint.
 </summary>
    </member>
    <member name="T:Flame.EnumConstraint">
      <summary>
 A constraint that is satisfied by enum types only.
 </summary>
    </member>
    <member name="M:Flame.EnumConstraint.Transform(Flame.IConverter`2{Flame.IType,Flame.IType})">
      <summary>
 Transforms the types in this generic constraint using the
 given type converter.
 </summary>
    </member>
    <member name="M:Flame.EnumConstraint.Satisfies(Flame.IType)">
      <summary>
 Gets a boolean value that indicates whether the given type argument
 satisfies the generic constraint.
 </summary>
    </member>
    <member name="M:Flame.PrimitiveMethod.Invoke(Flame.IBoundObject,System.Collections.Generic.IEnumerable`1{Flame.IBoundObject})">
      <summary>
 Invokes the method with the provided caller and arguments.
 </summary>
      <param name="Arguments" />
      <returns>
 A bound object if the invocation was successful.
 Otherwise, null.
 </returns>
    </member>
    <member name="M:Flame.PrimitiveTypes.GetPrimitiveMagnitude(Flame.IType)">
      <summary>
 Gets the given type's primitive magnitude. The following table
 maps primitive magnitudes to primitives:
 * 4 - 64-bit primitives: float64, int64, uint64, bit64.
 * 3 - 32-bit primitives: float32, int32, uint32, bit32.
 * 2 - 16-bit primitives: int16, uint16, bit16, char.
 * 1 - 8-bit primitives: int8, uint8, bit8, bool.
 * 0 - everything else.
 </summary>
    </member>
    <member name="T:Flame.DescriptionAttribute">
      <summary>
 Defines an attribute that captures a description or documentation,
 such as this comment.
 </summary>
    </member>
    <member name="M:Flame.DescriptionAttribute.#ctor(Pixie.IMarkupNode)">
      <summary>
 Creates a new description attribute from the given markup node.
 </summary>
    </member>
    <member name="M:Flame.DescriptionAttribute.#ctor(System.String,Pixie.IMarkupNode)">
      <summary>
 Creates a new description attribute from the given tag and
 description body.
 </summary>
    </member>
    <member name="M:Flame.DescriptionAttribute.#ctor(System.String)">
      <summary>
 Creates a new 'summary' description attribute from the given
 description body.
 </summary>
    </member>
    <member name="M:Flame.DescriptionAttribute.#ctor(System.String,System.String)">
      <summary>
 Creates a new description attribute from the given tag and
 description body.
 </summary>
    </member>
    <member name="P:Flame.DescriptionAttribute.Tag">
      <summary>
 Gets this description's tag, which identifies the type of description.
 </summary>
    </member>
    <member name="P:Flame.DescriptionAttribute.Attributes">
      <summary>
 Gets this description's attributes.
 </summary>
    </member>
    <member name="P:Flame.DescriptionAttribute.Description">
      <summary>
 Gets the actual description.
 </summary>
    </member>
    <member name="P:Flame.DescriptionAttribute.Contents">
      <summary>
 Gets the description attribute as a markup node.
 </summary>
    </member>
    <member name="T:Flame.EnumerableAttribute">
      <summary>
 An attribute for enumerable base types.
 </summary>
    </member>
    <member name="P:Flame.IBinder.Environment">
      <summary>
 Gets the environment for this binder.
 </summary>
    </member>
    <member name="P:Flame.BinderBase.Environment">
      <summary>
 Gets the environment for this binder.
 </summary>
    </member>
    <member name="M:Flame.IGenericParameterBuilder.AddConstraint(Flame.IGenericConstraint)">
      <summary>
 Adds a constraint to the generic parameter.
 </summary>
    </member>
    <member name="M:Flame.GenericParameterBuilderExtensions.AddTypeConstraint(Flame.IGenericParameterBuilder,Flame.IType)">
      <summary>
 Adds a type constraint to the generic parameter.
 </summary>
      <param name="TypeConstraint" />
    </member>
    <member name="M:Flame.IntersectionType.GetDefaultValue">
      <summary>
 Gets the default value for this type.
 </summary>
    </member>
    <member name="T:Flame.IntersectionAncestryRules">
      <summary>
 Defines ancestry rules for intersection types.
 </summary>
    </member>
    <member name="M:Flame.IntersectionAncestryRules.GetAncestryDegree(Flame.IType,Flame.IType)">
      <summary>
 Determines whether the second type is a subtype of the first.
 An ancestry degree of zero means that the two types are equivalent,
 an ancestry degree greater than zero means that the second type
 is a subtype of the first, and any other value means that - according
 to this set of rules - there is neither an equivalence, nor a subtype
 relationship.
 </summary>
    </member>
    <member name="T:Flame.MethodType">
      <summary>
 The type of a delegate expression.
 </summary>
    </member>
    <member name="M:Flame.MethodType.GetDefaultValue">
      <summary>
 Gets the default value for this type.
 </summary>
    </member>
    <member name="P:Flame.MethodType.SignatureName">
      <summary>
 Gets a string that describes this method type's signature.
 </summary>
    </member>
    <member name="P:Flame.MethodType.Method">
      <summary>
 Gets the method this method type is based on.
 </summary>
    </member>
    <member name="T:Flame.MethodTypeAncestryRules">
      <summary>
 Ancestry rules for delegates.
 </summary>
    </member>
    <member name="M:Flame.MethodTypeAncestryRules.GetAncestryDegree(Flame.IType,Flame.IType)">
      <summary>
 Determines whether the second type is a subtype of the first.
 An ancestry degree of zero means that the two types are equivalent,
 an ancestry degree greater than zero means that the second type
 is a subtype of the first, and any other value means that - according
 to this set of rules - there is neither an equivalence, nor a subtype
 relationship.
 </summary>
    </member>
    <member name="M:Flame.Primitives.PrimitiveType`1.GetDefaultValue">
      <summary>
 Gets the default value for this type.
 </summary>
    </member>
    <member name="T:Flame.Primitives.HashableType">
      <summary>
 An interface for hashable types.
 </summary>
    </member>
    <member name="M:Flame.Primitives.GetHashCodeImplementation`1.Invoke(Flame.IBoundObject,System.Collections.Generic.IEnumerable`1{Flame.IBoundObject})">
      <summary>
 Invokes the method with the provided caller and arguments.
 </summary>
      <param name="Arguments" />
      <returns>
 A bound object if the invocation was successful.
 Otherwise, null.
 </returns>
    </member>
    <member name="P:Flame.Primitives.PrimitiveParameter.FullName">
      <summary>
 Gets the member's full name.
 </summary>
    </member>
    <member name="P:Flame.Primitives.PrimitiveParameter.Name">
      <summary>
 Gets the member's name.
 </summary>
    </member>
    <member name="P:Flame.Primitives.PrimitiveParameter.Attributes">
      <summary>
 Gets the member's attributes.
 </summary>
      <returns />
    </member>
    <member name="P:Flame.Primitives.PrimitiveParameter.ParameterType">
      <summary>
 Gets the parameter's type.
 </summary>
    </member>
    <member name="T:Flame.Primitives.MethodRootPrimitiveType">
      <summary>
 A base type for primitive interfaces that are root types, and define nothing but methods.
 </summary>
    </member>
    <member name="M:Flame.Primitives.MethodRootPrimitiveType.GetDefaultValue">
      <summary>
 Gets the default value for this type.
 </summary>
    </member>
    <member name="M:Flame.Primitives.EqualsImplementation`1.Invoke(Flame.IBoundObject,System.Collections.Generic.IEnumerable`1{Flame.IBoundObject})">
      <summary>
 Invokes the method with the provided caller and arguments.
 </summary>
      <param name="Arguments" />
      <returns>
 A bound object if the invocation was successful.
 Otherwise, null.
 </returns>
    </member>
    <member name="M:Flame.Primitives.StringPrimitiveType.GetDefaultValue">
      <summary>
 Gets the default value for this type.
 </summary>
    </member>
    <member name="M:Flame.Primitives.NullPrimitiveType.GetDefaultValue">
      <summary>
 Gets the default value for this type.
 </summary>
    </member>
    <member name="M:Flame.Attributes.ConstructedAttribute.GetArguments">
      <summary>
 Gets the arguments that were passed to the attribute constructor.
 </summary>
      <returns />
    </member>
    <member name="P:Flame.Attributes.ConstructedAttribute.AttributeType">
      <summary>
 Gets the attribute's type.
 </summary>
    </member>
    <member name="P:Flame.Attributes.ConstructedAttribute.Value">
      <summary>
 Gets the attribute's value.
 </summary>
    </member>
    <member name="P:Flame.Binding.NamespaceTreeBinder.Environment">
      <summary>
 Gets the environment for this binder.
 </summary>
    </member>
    <member name="P:Flame.Binding.DualBinder.Environment">
      <summary>
 Gets the environment for this binder.
 </summary>
    </member>
    <member name="T:Flame.Binding.CachingBinder">
      <summary>
 A binder that performs a type lookup only once, and then caches the result.
 </summary>
    </member>
    <member name="P:Flame.Binding.CachingBinder.Environment">
      <summary>
 Gets the environment for this binder.
 </summary>
    </member>
    <member name="T:Flame.Build.ArrayAncestryRules">
      <summary>
 A set of ancestry rules for non-covariant arrays:
 only arrays with the same rank and element type are interchangeable.
 </summary>
    </member>
    <member name="M:Flame.Build.ArrayAncestryRules.GetAncestryDegree(Flame.IType,Flame.IType)">
      <summary>
 Determines whether the second type is a subtype of the first.
 An ancestry degree of zero means that the two types are equivalent,
 an ancestry degree greater than zero means that the second type
 is a subtype of the first, and any other value means that - according
 to this set of rules - there is neither an equivalence, nor a subtype
 relationship.
 </summary>
    </member>
    <member name="T:Flame.Build.CompositeConverter`3">
      <summary>
 A generic converter that is the composition of two conversion functions.
 </summary>
    </member>
    <member name="T:Flame.Build.ContainerTypeBase">
      <summary>
 Defines a base type for container types.
 </summary>
    </member>
    <member name="M:Flame.Build.ContainerTypeBase.#ctor(Flame.IType)">
      <summary>
 Creates a container type from the given element type.
 </summary>
    </member>
    <member name="M:Flame.Build.ContainerTypeBase.GetDefaultValue">
      <summary>
 Gets the default value for this type.
 </summary>
    </member>
    <member name="P:Flame.Build.ContainerTypeBase.ElementType">
      <summary>
 Gets this container type's element type.
 </summary>
    </member>
    <member name="T:Flame.Build.DefinitionAncestryRules">
      <summary>
 Ancestry rules for type definitions.
 </summary>
    </member>
    <member name="M:Flame.Build.DefinitionAncestryRules.GetAncestryDegree(Flame.IType,Flame.IType)">
      <summary>
 Determines whether the second type is a subtype of the first.
 An ancestry degree of zero means that the two types are equivalent,
 an ancestry degree greater than zero means that the second type
 is a subtype of the first, and any other value means that - according
 to this set of rules - there is neither an equivalence, nor a subtype
 relationship.
 </summary>
    </member>
    <member name="T:Flame.Build.NullAncestryRules">
      <summary>
 Defines ancestry rules for the `null` type. These rules state that
 null is equivalent to itself and that null is a direct subtype of
 every reference and pointer type.
 </summary>
    </member>
    <member name="M:Flame.Build.NullAncestryRules.GetAncestryDegree(Flame.IType,Flame.IType)">
      <summary>
 Determines whether the second type is a subtype of the first.
 An ancestry degree of zero means that the two types are equivalent,
 an ancestry degree greater than zero means that the second type
 is a subtype of the first, and any other value means that - according
 to this set of rules - there is neither an equivalence, nor a subtype
 relationship.
 </summary>
    </member>
    <member name="M:Flame.Build.DescribedAssembly.CreateBinder">
      <summary>
 Creates a binder for this assembly.
 </summary>
      <returns />
    </member>
    <member name="M:Flame.Build.DescribedAssembly.GetEntryPoint">
      <summary>
 Gets the entry point method for this assembly.
 </summary>
      <returns />
    </member>
    <member name="M:Flame.Build.DescribedGenericParameter.AddConstraint(Flame.IGenericConstraint)">
      <summary>
 Adds a constraint to the generic parameter.
 </summary>
    </member>
    <member name="M:Flame.Build.DescribedGenericParameter.GetDefaultValue">
      <summary>
 Gets the default value for this type.
 </summary>
    </member>
    <member name="P:Flame.Build.DescribedMethod.GenericParameters">
      <summary>
 Gets this method's generic parameters.
 </summary>
      <returns />
    </member>
    <member name="P:Flame.Build.DescribedParameter.ParameterType">
      <summary>
 Gets the parameter's (default) type.
 </summary>
    </member>
    <member name="T:Flame.Build.DescribedType">
      <summary>
 Defines a "described type": an IType implementation that makes
 synthesizing types easier.
 </summary>
    </member>
    <member name="M:Flame.Build.DescribedType.AddBaseType(Flame.IType)">
      <summary>
 Adds the given type to this described type's set of base types.
 </summary>
    </member>
    <member name="M:Flame.Build.DescribedType.AddGenericParameter(Flame.IGenericParameter)">
      <summary>
 Adds the given generic parameter to this described type's
 type parameter list.
 </summary>
    </member>
    <member name="M:Flame.Build.DescribedType.AddMethod(Flame.IMethod)">
      <summary>
 Adds the given method to this described type's list of methods.
 </summary>
    </member>
    <member name="M:Flame.Build.DescribedType.AddProperty(Flame.IProperty)">
      <summary>
 Adds the given property to this described type's list of properties.
 </summary>
    </member>
    <member name="M:Flame.Build.DescribedType.AddField(Flame.IField)">
      <summary>
 Adds the given field to this described type's list of fields.
 </summary>
    </member>
    <member name="M:Flame.Build.DescribedType.AddNestedType(Flame.IType)">
      <summary>
 Adds the given type to this described type's list of nested
 types.
 </summary>
    </member>
    <member name="M:Flame.Build.DescribedType.GetDefaultValue">
      <summary>
 Gets the default value for this type.
 </summary>
    </member>
    <member name="P:Flame.Build.DescribedType.BaseTypes">
      <summary>
 Gets this described type's base types.
 </summary>
    </member>
    <member name="P:Flame.Build.DescribedType.Methods">
      <summary>
 Gets all methods stored in this described type.
 </summary>
    </member>
    <member name="P:Flame.Build.DescribedType.Properties">
      <summary>
 Gets all properties stored in this described type.
 </summary>
    </member>
    <member name="P:Flame.Build.DescribedType.Fields">
      <summary>
 Gets all fields stored in this described type.
 </summary>
    </member>
    <member name="P:Flame.Build.DescribedType.Types">
      <summary>
 Gets all nested types stored in this described type.
 </summary>
    </member>
    <member name="P:Flame.Build.DescribedType.DeclaringAssembly">
      <summary>
 Gets this described type's declaring assembly, if any.
 </summary>
    </member>
    <member name="P:Flame.Build.DescribedType.DeclaringNamespace">
      <summary>
 Gets this type's declaring type.
 </summary>
    </member>
    <member name="T:Flame.Build.GenericAncestryRules">
      <summary>
 Defines ancestry rules for generic type instances.
 </summary>
    </member>
    <member name="M:Flame.Build.GenericAncestryRules.GetAncestryDegree(Flame.IType,Flame.IType)">
      <summary>
 Determines whether the second type is a subtype of the first.
 An ancestry degree of zero means that the two types are equivalent,
 an ancestry degree greater than zero means that the second type
 is a subtype of the first, and any other value means that - according
 to this set of rules - there is neither an equivalence, nor a subtype
 relationship.
 </summary>
    </member>
    <member name="T:Flame.Build.GenericInstanceComparer">
      <summary>
 Compares types and decides whether the second is a possible generic instantiation of the first.
 </summary>
    </member>
    <member name="M:Flame.Build.GenericInstanceComparer.CompareIncompatible(Flame.IType,Flame.IType)">
      <summary>
 Compares two structurally incompatible types.
 </summary>
    </member>
    <member name="T:Flame.Build.GenericResolvingConverter">
      <summary>
 A type converter that resolves type parameters based on a generic resolver.
 </summary>
    </member>
    <member name="T:Flame.Build.PointerAncestryRules">
      <summary>
 Represents the following set of ancestry rules for pointers:
  * Null is a pointer type
  * Two pointer type of the same pointer kind have the same ancestry degree
    as their elements.
 </summary>
    </member>
    <member name="M:Flame.Build.PointerAncestryRules.GetAncestryDegree(Flame.IType,Flame.IType)">
      <summary>
 Determines whether the second type is a subtype of the first.
 An ancestry degree of zero means that the two types are equivalent,
 an ancestry degree greater than zero means that the second type
 is a subtype of the first, and any other value means that - according
 to this set of rules - there is neither an equivalence, nor a subtype
 relationship.
 </summary>
    </member>
    <member name="P:Flame.Build.RetypedParameter.ParameterType">
      <summary>
 Gets the parameter's (default) type.
 </summary>
    </member>
    <member name="T:Flame.Build.TypeComparerBase`1">
      <summary>
 Describes a generic type comparer: a class that compares two types and produces a result based on that.
 </summary>
    </member>
    <member name="M:Flame.Build.TypeComparerBase`1.CompareIncompatible(Flame.IType,Flame.IType)">
      <summary>
 Compares two structurally incompatible types.
 </summary>
    </member>
    <member name="M:Flame.Build.TypeComparerBase`1.CompareUnknown(Flame.IType,Flame.IType)">
      <summary>
 Compares two types that have an unknown structure.
 </summary>
    </member>
    <member name="M:Flame.Build.TypeComparerBase`1.CompareGenericInstances(Flame.IType,Flame.IType)">
      <summary>
 Compares two generic type instances.
 </summary>
    </member>
    <member name="M:Flame.Build.TypeEqualityComparer.CompareIncompatible(Flame.IType,Flame.IType)">
      <summary>
 Compares two structurally incompatible types.
 </summary>
    </member>
    <member name="T:Flame.Build.ScopedTypeEqualityComparer">
      <summary>
 A type equality comparer that assumes that type parameters with equal names are equal.
 </summary>
    </member>
    <member name="T:Flame.Build.TypeFieldConverter">
      <summary>
 A converter that converts the declaring types of the fields it's given,
 and creates generic field instances based on these converted declaring types.
 This relies on the assumption that a converted type's recursive generic
 declaration does not change.
 </summary>
    </member>
    <member name="T:Flame.Build.TypeMethodConverter">
      <summary>
 A converter that converts the declaring types of the methods it's given,
 and creates generic method instances based on these converted declaring types.
 This relies on the assumption a the converted type's recursive generic
 declaration does not change.
 </summary>
    </member>
    <member name="T:Flame.Build.TypeMappingConverter">
      <summary>
 A type converter that maps specific types to specific other types.
 </summary>
    </member>
    <member name="T:Flame.Build.TypeParameterConverter">
      <summary>
 A type converter that converts type parameters to a type parameter with the same name of a generic member.
 </summary>
    </member>
    <member name="T:Flame.Build.VectorAncestryRules">
      <summary>
 A set of ancestry rules for non-covariant vectors:
 only vectors with the same dimensions and element types are interchangeable.
 </summary>
    </member>
    <member name="M:Flame.Build.VectorAncestryRules.GetAncestryDegree(Flame.IType,Flame.IType)">
      <summary>
 Determines whether the second type is a subtype of the first.
 An ancestry degree of zero means that the two types are equivalent,
 an ancestry degree greater than zero means that the second type
 is a subtype of the first, and any other value means that - according
 to this set of rules - there is neither an equivalence, nor a subtype
 relationship.
 </summary>
    </member>
    <member name="P:Flame.Operator.Static_Singleton.IsInstance">
      <summary>
 An operator that tests if a given reference or pointer is of a specific type,
 and returns a boolean.
 This is equivalent to the C# `is` operator.
 </summary>
    </member>
    <member name="P:Flame.Operator.Static_Singleton.AsInstance">
      <summary>
 An operator that returns the given given reference or pointer if it is
 of the given type. Otherwise, null is returned.
 This is equivalent to the C# `as` operator.
 </summary>
    </member>
    <member name="P:Flame.Operator.Static_Singleton.StaticCast">
      <summary>
 A conversion operator that converts a given value to an equivalent value
 of a different type. User-defined conversions overload this operator.
 </summary>
      <example>
        <code>
 double x = 3.0;
 double i = (int)x;
            ^~~~~
 </code>
      </example>
    </member>
    <member name="P:Flame.Operator.Static_Singleton.DynamicCast">
      <summary>
 Defines a dynamic cast operator, which performs a runtime check to
 determine if a given reference or pointer is of a given type.
 The given reference or pointer is returned if this is the case.
 Otherwise, an exception is thrown at runtime.
 </summary>
    </member>
    <member name="P:Flame.Operator.Static_Singleton.ReinterpretCast">
      <summary>
 Defines a reinterpret cast operator, which converts a reference or
 pointer type to another reference or pointer type. The operation is
 assumed to always succeed, and does not require a runtime check.
 </summary>
    </member>
    <member name="P:Flame.Operator.Static_Singleton.GetDelegate">
      <summary>
 Creates a non-virtual delegate from a method and a closure value.
 Said closure value's type must be a subtype of the given method's
 declaring type.
 </summary>
    </member>
    <member name="P:Flame.Operator.Static_Singleton.GetVirtualDelegate">
      <summary>
 Creates a virtual delegate from a method and a closure value.
 Said closure value's type must be a subtype of the given method's
 declaring type.
 </summary>
    </member>
    <member name="P:Flame.Operator.Static_Singleton.GetCurriedDelegate">
      <summary>
 Creates a non-virtual delegate from a static method and a closure value,
 which is the method's first parameter. Said closure value's type need not
 be a subtype of the given method's declaring type. The resulting delegate
 will have one parameter fewer than the number of parameters the
 method it is based on.
 </summary>
    </member>
  </members>
</doc>