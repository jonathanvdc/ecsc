<?xml version="1.0"?>
<doc>
  <assembly>
    <name>Pixie</name>
  </assembly>
  <members>
    <member name="T:Pixie.IAttributes">
      <summary>
 Defines a collection of attributes.
 </summary>
    </member>
    <member name="M:Pixie.IAttributes.Get``1(System.String,T)">
      <summary>
 Gets the attribute with the given key if it is present.
 Otherwise, returns the given default value.
 </summary>
    </member>
    <member name="M:Pixie.IAttributes.ContainsKey(System.String)">
      <summary>
 Gets a boolean value that indicates whether an attribute is identified
 by the given key.
 </summary>
    </member>
    <member name="P:Pixie.IAttributes.Keys">
      <summary>
 Gets all attribute keys in this attribute collection.
 </summary>
    </member>
    <member name="T:Pixie.IMarkupNode">
      <summary>
 Defines a simple and extensible interchange format for markup data.
 </summary>
    </member>
    <member name="P:Pixie.IMarkupNode.Type">
      <summary>
 Gets the markup node's type.
 </summary>
    </member>
    <member name="P:Pixie.IMarkupNode.Attributes">
      <summary>
 Gets the options associated with this markup node.
 </summary>
    </member>
    <member name="P:Pixie.IMarkupNode.Children">
      <summary>
 Gets the markup node's children.
 </summary>
    </member>
    <member name="T:Pixie.IStringAttributes">
      <summary>
 Defines a collection of attributes that are represented by strings.
 </summary>
    </member>
    <member name="M:Pixie.IStringAttributes.AsDictionary">
      <summary>
 Gets a read-only dictionary that contains these attributes as strings.
 </summary>
    </member>
    <member name="T:Pixie.IAttributeParser">
      <summary>
 Defines common functionality for attribute value parsers.
 </summary>
    </member>
    <member name="M:Pixie.IAttributeParser.Parse``1(System.String)">
      <summary>
 Parses an attribute's value.
 </summary>
    </member>
    <member name="M:Pixie.IAttributeParser.CanParse``1">
      <summary>
 Gets a boolean value that indicates whether this attribute handler
 can parse a value of the given type or not.
 </summary>
    </member>
    <member name="T:Pixie.IAttributePrinter">
      <summary>
 Defines common functionality for attribute value printers.
 </summary>
    </member>
    <member name="M:Pixie.IAttributePrinter.CanPrint``1">
      <summary>
 Gets a boolean value that indicates whether a value of the given
 type can be converted to its string representation or not.
 </summary>
    </member>
    <member name="M:Pixie.IAttributePrinter.Print``1(T)">
      <summary>
 Gets a value's string representation.
 </summary>
    </member>
    <member name="T:Pixie.IAttributeHandler">
      <summary>
 Defines common functionality for attribute value handlers.
 </summary>
    </member>
    <member name="T:Pixie.NodeConstants">
      <summary>
 Defines constants for markup nodes.
 </summary>
    </member>
    <member name="F:Pixie.NodeConstants.TextNodeType">
      <summary>
 A markup node type for text nodes.
 </summary>
    </member>
    <member name="F:Pixie.NodeConstants.TextAttribute">
      <summary>
 An attribute key for text node contents.
 </summary>
    </member>
    <member name="F:Pixie.NodeConstants.ColorAttribute">
      <summary>
 An attribute key for color attributes.
 </summary>
    </member>
    <member name="F:Pixie.NodeConstants.ErrorNodeType">
      <summary>
 A markup node type for nodes that contain an error report.
 </summary>
    </member>
    <member name="F:Pixie.NodeConstants.WarningNodeType">
      <summary>
 A markup node type for nodes that contain an warning report.
 </summary>
    </member>
    <member name="F:Pixie.NodeConstants.MessageNodeType">
      <summary>
 A markup node type for message nodes.
 </summary>
    </member>
    <member name="F:Pixie.NodeConstants.EventNodeType">
      <summary>
 A markup node type for nodes that report events.
 </summary>
    </member>
    <member name="F:Pixie.NodeConstants.SuccessNodeType">
      <summary>
 A markup node type for nodes that report a success.
 </summary>
    </member>
    <member name="F:Pixie.NodeConstants.HighlightNodeType">
      <summary>
 A markup node type for nodes that should be highlighted.
 </summary>
    </member>
    <member name="F:Pixie.NodeConstants.HighlightingTypeAttribute">
      <summary>
 An attribute key that specifies a highlighting type.
 </summary>
    </member>
    <member name="F:Pixie.NodeConstants.DefaultHighlightingType">
      <summary>
 The default highlighting type value.
 </summary>
    </member>
    <member name="F:Pixie.NodeConstants.MissingHighlightingType">
      <summary>
 A highlighting type that indicates missing components.
 </summary>
    </member>
    <member name="F:Pixie.NodeConstants.ExtraHighlightingType">
      <summary>
 A highlighting type that indicates additional components.
 </summary>
    </member>
    <member name="F:Pixie.NodeConstants.SourceNodeType">
      <summary>
 A markup node type that identifies a source code block node.
 </summary>
    </member>
    <member name="F:Pixie.NodeConstants.SourceQuoteNodeType">
      <summary>
 A markup node type that identifies an inline source code quote node.
 </summary>
    </member>
    <member name="F:Pixie.NodeConstants.DiagnosticsNodeType">
      <summary>
 A markup node type that identifies a node that represents diagnostics
 data.
 </summary>
    </member>
    <member name="F:Pixie.NodeConstants.TitleNodeType">
      <summary>
 A markup node type for title nodes.
 </summary>
    </member>
    <member name="F:Pixie.NodeConstants.SummaryNodeType">
      <summary>
 A markup node type for nodes that represent a summary.
 </summary>
    </member>
    <member name="F:Pixie.NodeConstants.RemarksNodeType">
      <summary>
 A markup node type for nodes that represent additional remarks.
 </summary>
    </member>
    <member name="F:Pixie.NodeConstants.ListNodeType">
      <summary>
 A markup node type for lists.
 </summary>
    </member>
    <member name="F:Pixie.NodeConstants.ListBulletAttribute">
      <summary>
 An attribute key for list bullet strings.
 </summary>
    </member>
    <member name="F:Pixie.NodeConstants.ListItemNodeType">
      <summary>
 A markup node type for list items.
 </summary>
    </member>
    <member name="F:Pixie.NodeConstants.ParagraphNodeType">
      <summary>
 A markup node type for paragraphs.
 </summary>
    </member>
    <member name="F:Pixie.NodeConstants.BrightNodeType">
      <summary>
 A markup node type for nodes whose contents should be printed
 in a bright color.
 </summary>
    </member>
    <member name="F:Pixie.NodeConstants.DimNodeType">
      <summary>
 A markup node type for nodes whose contents should be printed
 in a dim color.
 </summary>
    </member>
    <member name="F:Pixie.NodeConstants.CauseNodeType">
      <summary>
 A markup node type that contains the superficial cause of why
 something is happening. For example, if a compiler issues a warning,
 then the "cause" of said warning being issued is the warning's
 associated option having been set to 'true'.
 Cause nodes should be as succinct as possible.
 </summary>
      <remarks>
 A console markup renderer could markup nodes such as
    <code>&lt;cause&gt;Winfinite-recursion&lt;/cause&gt;</code>,
 like so
    <code>[-Winfinite-recursion]</code></remarks>
    </member>
    <member name="T:Pixie.TextNodeExtensions">
      <summary>
 Defines common extensions for text nodes.
 </summary>
    </member>
    <member name="M:Pixie.TextNodeExtensions.GetText(Pixie.IMarkupNode)">
      <summary>
 Gets the text this node contains directly.
 </summary>
    </member>
    <member name="M:Pixie.TextNodeExtensions.GetAllText(Pixie.IMarkupNode)">
      <summary>
 Recursively gets the text this node contains, concatenated with the
 text its children contain.
 </summary>
    </member>
    <member name="P:Pixie.TextNodeExtensions.IsTextNode">
      <summary>
 Gets a boolean value that indicates whether this node is a text node.
 </summary>
    </member>
    <member name="T:Pixie.StyleNodeExtensions">
      <summary>
 Provides node extensions for node style data.
 </summary>
    </member>
    <member name="M:Pixie.StyleNodeExtensions.GetColor(Pixie.IMarkupNode)">
      <summary>
 Gets the color associated with this markup node.
 </summary>
    </member>
    <member name="P:Pixie.StyleNodeExtensions.HasColor">
      <summary>
 Gets a boolean value that tells if the given markup node has a
 color attribute.
 </summary>
    </member>
    <member name="T:Pixie.ListExtensions">
      <summary>
 Defines common extensions for lists.
 </summary>
    </member>
    <member name="M:Pixie.ListExtensions.CreateList(Pixie.IMarkupNode,Pixie.IAttributes,System.Collections.Generic.IEnumerable`1{Pixie.IMarkupNode})">
      <summary>
 Creates a list from the given header, attributes and items.
 </summary>
    </member>
    <member name="M:Pixie.ListExtensions.CreateList(System.String,Pixie.IAttributes,System.Collections.Generic.IEnumerable`1{Pixie.IMarkupNode})">
      <summary>
 Creates a list from the given header, attributes and items.
 </summary>
    </member>
    <member name="M:Pixie.ListExtensions.CreateList(System.String,System.String,System.Collections.Generic.IEnumerable`1{Pixie.IMarkupNode})">
      <summary>
 Creates a list from the given header, bullet string and list items.
 </summary>
    </member>
    <member name="M:Pixie.ListExtensions.CreateList(Pixie.IMarkupNode,System.Collections.Generic.IEnumerable`1{Pixie.IMarkupNode})">
      <summary>
 Creates a list from the given header and list items.
 </summary>
    </member>
    <member name="M:Pixie.ListExtensions.CreateList(System.String,System.Collections.Generic.IEnumerable`1{Pixie.IMarkupNode})">
      <summary>
 Creates a list from the given header and list items.
 </summary>
    </member>
    <member name="M:Pixie.ListExtensions.CreateList(System.Collections.Generic.IEnumerable`1{Pixie.IMarkupNode})">
      <summary>
 Creates a list from the given list items.
 </summary>
    </member>
    <member name="T:Pixie.PredefinedAttributes">
      <summary>
 Defines an attribute collection based on a dictionary of
 predefined attributes.
 </summary>
    </member>
    <member name="M:Pixie.PredefinedAttributes.#ctor">
      <summary>
 Creates an empty attribute collection.
 </summary>
    </member>
    <member name="M:Pixie.PredefinedAttributes.#ctor(System.Collections.Generic.IReadOnlyDictionary`2{System.String,System.Object})">
      <summary>
 Creates a new attribute collection based on a dictionary of
 predefined attributes.
 </summary>
    </member>
    <member name="M:Pixie.PredefinedAttributes.Get``1(System.String,T)">
      <summary>
 Gets the attribute with the given key if it is present.
 Otherwise, returns the given default value.
 </summary>
    </member>
    <member name="M:Pixie.PredefinedAttributes.ContainsKey(System.String)">
      <summary>
 Gets a boolean value that indicates whether an attribute is identified
 by the given key.
 </summary>
    </member>
    <member name="P:Pixie.PredefinedAttributes.Values">
      <summary>
 Gets the attribute collection's values.
 </summary>
    </member>
    <member name="T:Pixie.StringAttributes">
      <summary>
 Defines a collection of attributes that uses a dictionary of string
 attributes and an attribute parser.
 </summary>
    </member>
    <member name="M:Pixie.StringAttributes.#ctor(System.Collections.Generic.IReadOnlyDictionary`2{System.String,System.String},Pixie.IAttributeParser)">
      <summary>
 Creates a new string attribute collection based on the given
 attribute dictionary and attribute parser.
 </summary>
    </member>
    <member name="M:Pixie.StringAttributes.AsDictionary">
      <summary>
 Gets a read-only dictionary that contains these attributes as strings.
 </summary>
    </member>
    <member name="M:Pixie.StringAttributes.Get``1(System.String,T)">
      <summary>
 Gets the attribute with the given key if it is present.
 Otherwise, returns the given default value.
 </summary>
    </member>
    <member name="M:Pixie.StringAttributes.ContainsKey(System.String)">
      <summary>
 Gets a boolean value that indicates whether an attribute is identified
 by the given key.
 </summary>
    </member>
    <member name="P:Pixie.StringAttributes.Values">
      <summary>
 Gets the string attribute collection's values.
 </summary>
    </member>
    <member name="P:Pixie.StringAttributes.Parser">
      <summary>
 Gets the string attribute collection's value parser.
 </summary>
    </member>
    <member name="T:Pixie.Color">
      <summary>
 Describes an RGBA color.
 </summary>
    </member>
    <member name="M:Pixie.Color.#ctor(System.Float64,System.Float64,System.Float64,System.Float64)">
      <summary>
 Creates a new color instance from the given channels.
 </summary>
    </member>
    <member name="M:Pixie.Color.#ctor(System.Float64,System.Float64,System.Float64)">
      <summary>
 Creates a new color instance from the given RGB channels.
 Alpha is set to one.
 </summary>
    </member>
    <member name="M:Pixie.Color.#ctor(System.Float64,System.Float64)">
      <summary>
 Creates a new color instance from the given grayscale and alpha values.
 </summary>
    </member>
    <member name="M:Pixie.Color.#ctor(System.Float64)">
      <summary>
 Creates a new color instance from the given grayscale value.
 </summary>
    </member>
    <member name="M:Pixie.Color.Over(Pixie.Color)">
      <summary>
 Applies the "over" alpha blending operator to this color and the given
 other color.
 </summary>
    </member>
    <member name="P:Pixie.Color.Grayscale">
      <summary>
 Gets the color's grayscale intensity.
 </summary>
    </member>
    <member name="P:Pixie.Color.Alpha">
      <summary>
 Gets the color's alpha channel.
 </summary>
    </member>
    <member name="P:Pixie.Color.Red">
      <summary>
 Gets the color's red channel.
 </summary>
    </member>
    <member name="P:Pixie.Color.Green">
      <summary>
 Gets the color's green channel.
 </summary>
    </member>
    <member name="P:Pixie.Color.Blue">
      <summary>
 Gets the color's blue channel.
 </summary>
    </member>
    <member name="T:Pixie.MarkupNode">
      <summary>
 A straightforward markup node implementation.
 </summary>
    </member>
  </members>
</doc>